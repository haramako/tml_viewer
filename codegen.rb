#!/usr/bin/env ruby
# coding: utf-8

#
# TML用のコードジェネレータ
#

require 'erb'

TEMPLATE = <<EOT
// This file is auto-generated by codegen.rb
#if UNITY_5
using UnityEngine;
#endif

namespace Tml {
	public partial class Style
	{
        <%- style_fields.each do |f| -%>
        public <%=f.type %> <%=f.cs_name %>;
        <%- end -%>

		public void Merge(Style over){
            <%- style_fields.each do |f| -%>
            if( over.<%=f.cs_name%> != <%=f.empty_value%> ) <%=f.cs_name%> = over.<%=f.cs_name%>;
            <%- end -%>
		}

		public void Seal(){
            <%- style_fields.each do |f| -%>
            if( <%=f.cs_name%> == <%=f.empty_value%> ) <%=f.cs_name%> = <%=f.seal_value%>;
            <%- end -%>
		}

        public void SetField(string name, string value){
            switch(name){
            <%- style_fields.each do |f| -%>
            case "<%=f.name%>":
                <%=f.cs_name%> = <%=f.parse_func%>(value);
                break;
            <%- end -%>
            default:
				Logger.Log ("invalid field name '" + name + "'");
                break;
            }
        }

		public static Style Empty(){
			return new Style () {
                <%- style_fields.each do |f| -%>
                <%=f.cs_name%> = <%=f.empty_value%>,
                <%- end -%>
			};
		}

	}

    public partial class StyleParser {
        static CharType[] CharTable = {
        <%- char_types.each.with_index do |c,i| -%>
        <%- if c.size > 0 -%>
            <%= c.uniq.map{|t| 'CharType.'+t.to_s.capitalize }.join(' | ') %>, // <%= i.chr.inspect %>
        <%- else -%>
            CharType.None,
        <%- end -%>
        <%- end -%>
        };
    }
}

#if !USE_SYSTEM_XML
namespace Tml.XmlPolyfill {
    public partial class XmlReader : IXmlLineInfo {
        static CharType[] CharTable = {
        <%- xml_char_types.each.with_index do |c,i| -%>
        <%- if c.size > 0 -%>
            <%= c.uniq.map{|t| 'CharType.'+t.to_s.capitalize }.join(' | ') %>, // <%= i.chr.inspect %>
        <%- else -%>
            CharType.None,
        <%- end -%>
        <%- end -%>
        };
    }
}
#endif
EOT

class StyleField
  attr_reader :name, :type, :inherit, :default

  def initialize(_type, _name, opt = {})
    @type = _type
    @name = _name
    @inherit = true if opt[:inherit]
    @default = opt[:default] if opt[:default]
  end
  
  def cs_name
    name.split(/-/).map{|s| s[0].upcase + s[1..-1] }.join
  end

  def default_value
    if default
      default
    else
      case type
      when :int
        '0'
      when :string
        '""'
      when :float
        '0'
      else
        raise
      end
    end
  end

  def seal_value
    if default
      default
    elsif inherit
      case type
      when :int
        'Inherit'
      when :string
        'null'
      when :float
        'InheritFloat'
      else
        raise
      end
    else
      default_value
    end
  end

  def empty_value
    case type
    when :int
      'Nothing'
    when :string
      'null'
    when :float
      'NothingFloat'
    else
      raise
    end
  end

  def parse_func
    case type
    when :int
      'int.Parse'
    when :string
      ''
    when :float
      'float.Parse'
    else
      raise
    end
  end
  
end

char_types = $char_types = Array.new(128){[]}
xml_char_types = $xml_char_types = Array.new(128){[]}
style_fields = $style_fields = []

def style_field( type, name, opt = {})
  $style_fields << StyleField.new(type, name, opt)
end

def char_type(type, *chars)
  chars.each do |cs|
    cs = cs.each_char if cs.is_a? String
    cs.each do |c|
      $char_types[c.ord] << type
    end
  end
end

def xml_char_type(type, *chars)
  chars.each do |cs|
    cs = cs.each_char if cs.is_a? String
    cs.each do |c|
      $xml_char_types[c.ord] << type
    end
  end
end

xml_char_type :alphabet, 'a'..'z', 'A'..'Z'
xml_char_type :number, '0'..'9'
xml_char_type :separator, '_-'
xml_char_type :open, '<'
xml_char_type :close, '/>'
xml_char_type :space, "\n\r\t "
xml_char_type :quote, '"', "'"

char_type :alphabet, 'a'..'z', 'A'..'Z'
char_type :number, '0'..'9'
char_type :hex, '0'..'9', 'a'..'f', 'A'..'F'
char_type :separator, '_-'
char_type :symbol, ':}{;#'
char_type :space, "\n\r\t "
char_type :quote, '"', "'"

style_field :int, 'margin-left'
style_field :int, 'margin-right'
style_field :int, 'margin-top'
style_field :int, 'margin-bottom'
style_field :int, 'padding-left'
style_field :int, 'padding-right'
style_field :int, 'padding-top'
style_field :int, 'padding-bottom'

style_field :int, 'font-size', inherit: true
style_field :float, 'font-scale', inherit: true, default: '1.0f'
style_field :int, 'line-height', inherit: true
style_field :float, 'line-scale', inherit: true

style_field :string, 'text-decoration'
style_field :string, 'color'
style_field :string, 'text-align'

style_field :string, 'background-image'
style_field :string, 'background-color'

puts ERB.new(TEMPLATE,nil,'-').run

